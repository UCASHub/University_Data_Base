DDL:


CREATE TABLE Address (
street_name VARCHAR2(30), 
block_name VARCHAR2(30), 
city_name VARCHAR2(30),
area_name VARCHAR2(30), 
CONSTRAINT adrs_pk PRIMARY KEY (street_name,block_name,city_name,area_name));

CREATE TABLE employee (
Employee_id Number(9) Primary key,
first_name  VARCHAR2(20) NOT NULL,
last_name VARCHAR2(40) NOT NULL,
nationality  VARCHAR2(20) NOT NULL,
national_id  Number(9) NOT NULL,
sex  CHAR  NOT NULL CHECK (sex IN ('M' , 'F')) ,
social_status  CHAR NOT NULL CHECK ( social_status  IN ('S','M','D' ) ), 
Salary number (6,2) check ( Salary >=0),
birh_place  VARCHAR2(10) NOT NULL ,
religion  VARCHAR2(20)  NOT NULL,
health_status  VARCHAR2(40) NOT NULL  ,
number_of_family_members  NUMBER(2) NOT NULL,
phone  NUMBER(12) NOT NULL,
telephone_home  NUMBER(9) ,
email VARCHAR2(30) NOT NULL,
password  VARCHAR2(30) NOT NULL,
area_name  VARCHAR2(30) NOT NULL,
city_name  VARCHAR2(30) NOT NULL,
block_name  VARCHAR2(30) NOT NULL,
street_name  VARCHAR2(30) NOT NULL,
Employee_cv LONG ,
foreign key (area_name,city_name,block_name,street_name) references address);

CREATE TABLE building (
building_code CHAR (1) PRIMARY KEY,
building_desc VARCHAR2 (100));

CREATE TABLE floor (
floor_number NUMBER (1),
building_code CHAR (1),
floor_desc VARCHAR2 (100),
FOREIGN KEY (building_code) REFERENCES building,
PRIMARY KEY (building_code, floor_number));

CREATE TABLE room (
room_number NUMBER (2),
floor_number NUMBER (1),
building_code CHAR (1),
capacity NUMBER (5) NOT NULL,
FOREIGN KEY (building_code,floor_number) REFERENCES floor,
PRIMARY KEY (building_code ,floor_number,room_number)  );

CREATE TABLE Department (
Department_id NUMBER (3),
Department_name VARCHAR2(30) NOT NULL UNIQUE,
room_number NUMBER (2),
floor_number NUMBER (1),
building_code CHAR (1),
FOREIGN KEY (building_code,floor_number,room_number) REFERENCES room,
PRIMARY KEY (Department_id));

CREATE TABLE Majors_Department (
Majors_Department_id NUMBER (3),
Majors_Department_name VARCHAR2(30) NOT NULL UNIQUE,
room_number NUMBER (2),
floor_number NUMBER (1),
building_code CHAR (1),
FOREIGN KEY (building_code,floor_number,room_number) REFERENCES room,
PRIMARY KEY (Majors_Department_id));

CREATE TABLE major (
major_id NUMBER (3) PRIMARY KEY,
major_name VARCHAR2(30) NOT NULL UNIQUE,
Majors_Department NUMBER (3) REFERENCES Majors_Department);

CREATE TABLE course (
course_id VARCHAR2(10),
year DATE,
semester NUMBER (1) CHECK (semester IN (1,2)),
course_name VARCHAR2(30) NOT NULL,
credit NUMBER (1) NOT NULL,
description LONG, 
Majors_Department NUMBER (3) REFERENCES Majors_Department,
PRIMARY KEY (course_id, year, semester));

CREATE TABLE teacher (
Teacher_id Number (9) references employee(Employee_id),
Employment_Start_Date Date default sysdate unique,
Employment_End_Date Date,
Majors_Department_id number (3) references Majors_Department,
Salary number (6,2) check (salary >=0),
PRIMARY KEY (teacher_id));

CREATE TABLE Manager (
Manager_id Number (9) references employee(Employee_id),
Employment_Start_Date Date default sysdate unique,
Employment_End_Date Date,
Salary number (6,2) check (salary >=0),
Manager_Grade varchar2(15) NOT NULL,
Majors_Department_id number (3) references Majors_Department,
Department_id number (3) references Department,
check (Majors_Department_id = null or Department_id = null),
PRIMARY KEY (Manager_id));

CREATE TABLE Security (
Security_id Number (9) references employee(Employee_id),
Employment_Start_Date Date default sysdate unique,
Employment_End_Date Date,
Salary number (6,2) check (salary >=0),
Department_id number (3) references Department,
PRIMARY KEY (Security_id));

CREATE TABLE Secretary (
Secretary_id Number (9) references employee(Employee_id),
Employment_Start_Date Date default sysdate unique,
Employment_End_Date Date,
Majors_Department_id number (3) references Majors_Department,
Department_id number (3) references Department,
check (Majors_Department_id = null or Department_id = null),
PRIMARY KEY (Secretary_id));

CREATE TABLE item (
item_id NUMBER (3) PRIMARY KEY,
item_description VARCHAR2(200) NOT NULL);

CREATE TABLE room_items (
item_id NUMBER (3) REFERENCES item,
room_number NUMBER (2),
floor_number NUMBER (1),
building_code CHAR (1),
FOREIGN KEY (building_code,floor_number,room_number) REFERENCES room,
quantity NUMBER (5) NOT NULL,
PRIMARY KEY (item_id , room_number )  );

CREATE TABLE study_plan (
plan_number Number (3),
major_id NUMBER (3) REFERENCES major,
PRIMARY KEY (plan_number, major_id));

CREATE TABLE study_plan_courses (
plan_number Number (3),
major_id NUMBER (3),
course_id VARCHAR2(10),
year DATE,
semester NUMBER (1),
FOREIGN KEY (course_id, year, semester) REFERENCES course,
FOREIGN KEY (plan_number, major_id) REFERENCES study_plan,
PRIMARY KEY (plan_number, major_id, course_id));

CREATE TABLE student (
sid NUMBER(9) PRIMARY KEY,
first_name_ar  VARCHAR2(30) NOT NULL,
father_name_ar  VARCHAR2(30) NOT NULL,
grand_father_name_ar   VARCHAR2(30) NOT NULL,
last_name_ar  VARCHAR2(30) NOT NULL,
first_name_en  VARCHAR2(20) NOT NULL,
father_name_en  VARCHAR2(30) NOT NULL,
grand_father_name_en  VARCHAR2(30) NOT NULL,
last_name_en  VARCHAR2(30) NOT NULL,
nationality  VARCHAR2(20) NOT NULL,
national_id  Number(9) NOT NULL,
sex  CHAR  NOT NULL CHECK (sex IN ('M' , 'F')) ,
social_status  CHAR NOT NULL CHECK ( social_status  IN ('S','M') ), 
guardian_name  VARCHAR2(30) NOT NULL,
guardian_national_id  Number(9) NOT NULL,
guardian_relation VARCHAR2(10) NOT NULL, 
birh_place  VARCHAR2(10) NOT NULL ,
date_of_birth  DATE NOT NULL,
religion  VARCHAR2(20)  NOT NULL,
health_status  VARCHAR2(40) NOT NULL  ,
mother_name  VARCHAR2(30) NOT NULL,
mother_job  VARCHAR2(20) NOT NULL , 
mother_job_desc  VARCHAR2(100) NOT NULL,
father_job  VARCHAR2(20) NOT NULL , 
father_job_desc  VARCHAR2(100) NOT NULL,
parents_status  VARCHAR2(30) NOT NULL  ,
number_of_family_members  NUMBER(2) NOT NULL,
family_university_students NUMBER(2) NOT NULL, 
social_affairs  VARCHAR2(40) NOT NULL ,
phone  NUMBER(12) ,
telephone_home  NUMBER(8) ,
emergency_phone   NUMBER(12) NOT NULL,
email VARCHAR2(30) ,
password  VARCHAR2(30) NOT NULL,
tawjihi_GPA  REAL NOT NULL,
tawjihi_field CHAR NOT NULL CHECK (tawjihi_field  IN ('S' , 'L' )  ) ,
area_name  VARCHAR2(30) NOT NULL,
city_name  VARCHAR2(30) NOT NULL,
block_name  VARCHAR2(30) NOT NULL,
balance NUMBER(5) NOT NULL,
street_name  VARCHAR2(30) NOT NULL,
major_name  NUMBER(3) NOT NULL REFERENCES major ,
foreign key (area_name,city_name,block_name,street_name) references address);

CREATE TABLE academic_advice (
teacher_id NUMBER (9),
sid NUMBER(9) REFERENCES student,
year DATE, 
semester NUMBER (1)  ,
PRIMARY KEY (teacher_id, sid, year, semester));

CREATE TABLE course_sections (
section_number NUMBER (3),
course_id VARCHAR2(10),
year DATE,
semester NUMBER (1),
teacher_id NUMBER(9) REFERENCES teacher,
FOREIGN KEY (course_id, year, semester) REFERENCES course,
PRIMARY KEY (section_number, course_id, year, semester));

CREATE TABLE enroll (
sid NUMBER(9) REFERENCES student,
course_id VARCHAR2(10) ,
section_number NUMBER(3) ,
year DATE , 
semester NUMBER(1) ,
grade_mid NUMBER (3) DEFAULT NULL ,
grade_final NUMBER (3) DEFAULT NULL,
FOREIGN KEY (section_number , course_id , year , semester) REFERENCES course_sections ,
PRIMARY KEY (sid , course_id , section_number , year , semester),
CHECK ((grade_final+grade_mid >=40)and (grade_final+grade_mid <=100 )));

CREATE TABLE section_rooms (
section_number NUMBER (3) ,
course_id VARCHAR2 (10) ,
year DATE , 
semester NUMBER (1),
room_number NUMBER (2),
floor_number NUMBER (1),
building_code CHAR (1),
FOREIGN KEY (building_code,floor_number,room_number) REFERENCES room,
day DATE ,
start_time DATE ,
end_time DATE ,
FOREIGN KEY (section_number , course_id , year , semester ) REFERENCES course_sections,
PRIMARY KEY (section_number ,course_id , year , semester, room_number) );

â€ƒ


CREATE TABLE Address_log (
street_name VARCHAR2(30) NOT NULL,
 block_name VARCHAR2(30) NOT NULL, 
city_name VARCHAR2(30) NOT NULL, 
area_name VARCHAR2(30) NOT NULL, 
action_name char (6) NOT NULL, 
action_date date default sysdate NOT NULL, 
action_user varchar2(30) default user NOT NULL);

create trigger ai_address_trigger after insert on address 
for each row
begin
insert into address_log values (:new.street_name ,:new.block_name ,:new.city_name ,:new.area_name ,'insert' ,default,default ); 
end;
 /

create trigger au_address_trigger after update on address
for each row 
begin 
insert into ADDRESS_LOG values (:old.street_name ,:old.block_name ,:old.city_name ,:old.area_name , 'delete',default,default );
insert into ADDRESS_LOG values (:new.street_name ,:new.block_name ,:new.city_name ,:new.area_name , 'insert',default,default ); 
end;
 /

create trigger ad_address_trigger after delete on address 
for each row 
begin 
insert into ADDRESS_LOG values (:old.street_name ,:old.block_name ,:old.city_name ,:old.area_name ,'delete' ,default ,default );
end;
 /

CREATE TABLE employee_log (
Employee_id Number(9) NOT NULL,
first_name  VARCHAR2(20) NOT NULL,
last_name VARCHAR2(40) NOT NULL,
nationality  VARCHAR2(20) NOT NULL,
national_id  Number(9) NOT NULL,
sex  CHAR  NOT NULL CHECK (sex IN ('M' , 'F')) ,
social_status  CHAR NOT NULL CHECK ( social_status  IN ('S','M','D' ) ), 
Salary number (6,2) check ( Salary >=0),
birh_place  VARCHAR2(10) NOT NULL ,
religion  VARCHAR2(20)  NOT NULL,
health_status  VARCHAR2(40) NOT NULL  ,
number_of_family_members  NUMBER(2) NOT NULL,
phone  NUMBER(12) NOT NULL,
telephone_home  NUMBER(9) ,
email VARCHAR2(30) NOT NULL,
password  VARCHAR2(30) NOT NULL,
area_name  VARCHAR2(30) NOT NULL,
city_name  VARCHAR2(30) NOT NULL,
block_name  VARCHAR2(30) NOT NULL,
street_name  VARCHAR2(30) NOT NULL,
action_name char(6) NOT NULL , 
action_date date default sysdate NOT NULL, 
action_user varchar2(30) default user NOT NULL );

create trigger ai_employee_trigger after insert on employee
for each row
begin
insert into employee_log values (:new.Employee_id , :new.first_name  , :new.last_name , :new.nationality  , :new.national_id  ,:new.sex  ,:new.social_status  , :new.Salary ,:new.birh_place  ,:new.religion  ,:new.health_status  ,:new.number_of_family_members  ,:new.phone  ,:new.telephone_home  ,:new.email,:new.password  ,:new.area_name ,:new.city_name  ,:new.block_name  ,:new.street_name  ,'insert' ,default,default ); 
end;
 /

create trigger au_employee_trigger after update on employee
for each row 
begin 
insert into employee_log values (:old.Employee_id , : old.first_name  , : old.last_name ,                 : old.nationality  , : old.national_id  ,: old.sex  ,: old.social_status  , : old.Salary ,: old.birh_place  ,: old.religion  ,: old.health_status  ,: old.number_of_family_members  ,: old.phone  ,: old.telephone_home  ,: old.email,: old.password  ,: old.area_name ,: old.city_name  ,: old.block_name  ,: old.street_name  ,: old.Employee_cv ,'delete' ,default,default ); 
insert into employee_log values ( :new.Employee_id , :new.first_name  , :new.last_name , :new.nationality  , :new.national_id  ,:new.sex  ,:new.social_status  , :new.Salary ,:new.birh_place  ,:new.religion  ,:new.health_status  ,:new.number_of_family_members  ,:new.phone  ,:new.telephone_home  ,:new.email,:new.password  ,:new.area_name ,:new.city_name  ,:new.block_name  ,:new.street_name ,'insert', default,default ); 
end;

end;
 /

create trigger ad_employee_trigger after delete on employee
for each row 
begin 
insert into employee_log values ( :old.Employee_id , : old.first_name  , : old.last_name ,                 : old.nationality  , : old.national_id  ,: old.sex  ,: old.social_status  , : old.Salary ,: old.birh_place  ,: old.religion  ,: old.health_status  ,: old.number_of_family_members  ,: old.phone  ,: old.telephone_home  ,: old.email,: old.password  ,: old.area_name ,: old.city_name  ,: old.block_name  ,: old.street_name  ,'delete' ,default,default ); 
end;
 /
CREATE TABLE building_log (
building_code CHAR (1) ,
building_desc VARCHAR2 (100),
action_name char(6) NOT NULL , 
action_date date default sysdate NOT NULL, 
action_user varchar2(30) default user NOT NULL );

create trigger ai_building_trigger after insert on building
for each row
begin
insert into building_log values (:new.building_code,:new.building_desc ,'insert' ,default,default ); 
end;
 /

create trigger au_building_trigger after update on building
for each row 
begin 
insert into building_log values (:old.building_code,:old.building_desc,'delete' ,default,default );
insert into building_log values (:new.building_code,:new.building_desc,'insert' ,default,default ); 
end;
 /

create trigger ad_building_trigger after delete on building
for each row 
begin 
insert into building_log values (:old.building_code,:old.building_desc,'delete' ,default,default );
end;
 /


CREATE TABLE floor_log (
floor_number NUMBER (1),
building_code CHAR (1),
floor_desc VARCHAR2 (100),
action_name char(6) NOT NULL , 
action_date date default sysdate NOT NULL, 
action_user varchar2(30) default user NOT NULL );


create trigger ai_floor_trigger after insert on floor
for each row
begin
insert into floor_log values (:new.floor_number ,:new.building_code,:new.floor_desc ,'insert' ,default,default ); 
end;
 /

create trigger au_floor_trigger after update on floor
for each row 
begin 
insert into floor_log values (:old.floor_number ,:old.building_code,:old.floor_desc ,'delete' ,default,default );
insert into floor_log values (:new.floor_number ,:new.building_code,:new.floor_desc ,'insert' ,default,default ); 
end;
 /

create trigger ad_floor_trigger after delete on floor
for each row 
begin 
insert into floor_log values (:new.floor_number ,:old.building_code,:old.floor_desc,'delete' , default ,default );
end;
 /
 
 
 rem --------------------------------------------------------------------------------------------------------------------


select * from tab;

select trigger_name from user_triggers;

insert into Address values('GazaStrip','Gaza','Naser','Elgesser');
insert into Employee values(120100001,'Ahmed','Elnemer','Chinese',123456789,'M','M',300.02,'Gaza','Islam','Good',20,970555555555,082876543,'Ahmed@mail.com','ABCD', 'GazaStrip','Gaza','Naser','Elgesser','I can eat icecream');

insert into Building values('A','No Desc');

